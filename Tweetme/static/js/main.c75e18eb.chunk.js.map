{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","open","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","setRequestHeader","onload","response","status","onerror","e","console","log","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleBackendAction","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","window","location","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","href","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","alert","handledidRetweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","onSubmit","newVal","current","value","ref","required","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c75e18eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nfunction getCookie(name) {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    var cookies = document.cookie.split(';');\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === (name + '=')) {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n  let jsonData;\n  if (data) {\n    jsonData = JSON.stringify(data)\n  }\n  const xhr = new XMLHttpRequest()\n  const url = `http://localhost:8000/api/${endpoint}` //api url\n  xhr.responseType = \"json\"\n  xhr.open(method, url)\n  const csrftoken = getCookie('csrftoken');\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n\n  //https://docs.djangoproject.com/en/2.2/ref/csrf/\n  // here there is no csrf token from the form, needs to be set on the request\n  if (csrftoken) {\n    xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n  }\n\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status)\n\n  }\n  xhr.onerror = function (e) {\n    console.log(e)\n    callback({ \"message\": \"Error request\" }, 400)\n  }\n  xhr.send(jsonData) //triggers the request\n}\n\n","import React from 'react'\n\nimport {\n  apiTweetAction\n} from './lookup'\n\nexport function ActionBtn(props) {\n    const { tweet, action, didPerformAction } = props\n    const likes = tweet.likes ? tweet.likes : 0\n    //const [likes, setLikes] = useState()\n    //const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n  \n    const handleBackendAction = (response, status) => {\n      console.log(response, status)\n      if ((status === 200 || status === 201) && didPerformAction) {\n        didPerformAction(response, status)\n      }\n    }\n  \n    const handleClick = (event) => {\n      event.preventDefault()\n      apiTweetAction(tweet.id, action.type, handleBackendAction)\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n  }","import { backendLookup } from '../lookup'\n\nexport function apiTweetCreate(newTweet, callback) {\n    backendLookup('POST', 'tweets/create/', callback, { content: newTweet })\n}\n\nexport function apiTweetAction(tweetId, action, callback) {\n    const data = { id: tweetId, action: action }\n    backendLookup('POST', 'tweets/action/', callback, data)\n}\n\nexport function apiTweetDetail(tweetId, callback) {\n    backendLookup('GET', `tweets/${tweetId}`, callback)\n}\n\nexport function apiTweetList(username, callback) {\n    let endpoint = \"tweets/\"\n    if (username){\n        endpoint = `tweets/?username=${username}`\n    }\n    backendLookup('GET', endpoint, callback)\n}","import React, { useState } from 'react'\n\nimport { ActionBtn } from './buttons'\n\nexport function ParentTweet(props) {\n  const { tweet } = props\n  return tweet.parent ? <div className='row'>\n    <div className='col-11 mx-auto p-3 border rounded'>\n      <p className='mb-0 text-muted small'>Retweet</p>\n      <Tweet hideActions className={''} tweet={tweet.parent} />\n    </div>\n  </div> : null\n\n}\n\nexport function Tweet(props) {\n  const { tweet, didRetweet, hideActions } = props\n  const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n  const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n  const path = window.location.pathname\n  const match = path.match(/(?<tweetid>\\d+)/)\n  const urlTweetId = match ? match.groups.tweetid : -1\n\n  const isDetail = `${tweet.id}` === `${urlTweetId}`\n  const handleLink = (event) => {\n    event.preventDefault()\n    window.location.href = `/${tweet.id}`\n    isDetail = true\n\n  }\n  const handlePerformAction = (newActionTweet, status) => {\n    if (status === 200) {\n      setActionTweet(newActionTweet)\n    } else if (status === 201) {\n      if (didRetweet) {\n        didRetweet(newActionTweet)\n      }\n    }\n\n  }\n\n  return <div className={className}>\n    <div>\n      <p>{tweet.id} - {tweet.content}</p>\n      <ParentTweet tweet={tweet}></ParentTweet>\n    </div>\n    <div className='btn btn-group'>\n      {(actionTweet && hideActions !== true) &&\n        <React.Fragment>\n          <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"like\", display: \"Likes\" }} />\n          <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"unlike\", display: \"Unlike\" }} />\n          <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"retweet\", display: \"Retweet\" }} />\n        </React.Fragment>\n      }\n      {isDetail === true ? null : <button className=\"btn btn-outline-primary\" onClick={handleLink}>View</button>}\n    </div>\n  </div>\n}\n","import React, { useEffect, useState } from 'react'\n\nimport {Tweet} from './detail'\nimport { apiTweetList } from './lookup'\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    // listen to the new tweets coming in from the props and concat to the final tweet\n    //render if the concatenation is bigger than the current render\n    useEffect(() => {\n      const final = [...props.newTweets].concat(tweetsInit)\n      if (final.length !== tweets.length) {\n        setTweets(final)\n      }\n    }, [props.newTweets, tweets, tweetsInit]) // needed dependencies\n  \n    useEffect(() => {\n      if (tweetsDidSet === false) {\n        const handleTweetListLookup = (response, status) => {\n          if (status === 200) {\n            setTweetsInit(response)\n            setTweetsDidSet(true)\n          } else {\n            alert(\"There was an error\")\n          }\n        }\n        apiTweetList(props.username, handleTweetListLookup)\n      }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n  \n    const handledidRetweet = (newTweets) => {\n      const updateTweetsInit = [...tweetsInit]\n      //append to the beginning\n      updateTweetsInit.unshift(newTweets)\n      setTweetsInit(updateTweetsInit)\n      const updateFinalTweets = [...tweets]\n      //append to the beginning\n      updateFinalTweets.unshift(tweets)\n      setTweetsInit(updateFinalTweets)\n    }\n    return tweets.map((item, index) => {\n      return <Tweet\n        tweet={item}\n        didRetweet={handledidRetweet}\n        className='my-5 py-3 border bg-white text-dark'\n        key={`${index}-{item.id}`} />\n    })\n  }","import React from 'react'\n\nimport { apiTweetCreate } from './lookup'\n\nexport function TweetCreate(props){\n  const textAreaRef = React.createRef()\n  const {didTweet} = props\n\n  const handleBackendUpdate = (response, status) => {\n    //backend api response handler\n    if (status === 201) {\n      didTweet(response)\n    } else {\n      alert(\"An error has occured please try again.\")\n    }\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newVal = textAreaRef.current.value\n    //push the new tweets to the beggining\n    //backend api response handler\n    apiTweetCreate(newVal, handleBackendUpdate)\n    textAreaRef.current.value = ''\n  }\n  return<div className={props.className}>\n      <form onSubmit={handleSubmit}>\n        <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n        </textarea>\n        <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n      </form>\n    </div>\n}","import React, { useEffect, useState } from 'react'\n\nimport {Tweet} from './detail'\nimport {TweetsList} from './list'\nimport {TweetCreate} from './create'\nimport {apiTweetAction, apiTweetDetail} from './lookup'\n\nexport function TweetsComponent(props) {\n  const [newTweets, setNewTweets] = useState([])\n\n  const canTweet = props.canTweet === \"false\" ? false : true\n\n  const handleNewTweet = (newTweets) => {\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift(newTweets)\n    setNewTweets(tempNewTweets)\n  }\n\n  return <div className={props.className}>\n    {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3'/>}\n    <TweetsList newTweets={newTweets} {...props} />\n  </div>\n}\n\nexport function TweetDetailComponent(props){\n  const {tweetId}  =props\n  const [didLookup, setDidLookup] = useState(false)\n  const [tweet, setTweet] = useState(null)\n\n  const handleBackendLookup=(response, status)=>{\n    if (status === 200){\n      setTweet(response)\n    }else{\n      alert(\"There was an error finding your tweet.\")\n    }\n  }\n  useEffect(()=>{\n    if (didLookup === false){\n      apiTweetDetail(tweetId, handleBackendLookup)\n      setDidLookup(true)\n\n    }\n  }, [didLookup, setDidLookup])\n  return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\n}\n\n\n\n\n\n","\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div >\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TweetsComponent, TweetDetailComponent } from './tweets';\n\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\n\nconst e = React.createElement\n\nconst tweetsEl = document.getElementById('tweetme')\nif (tweetsEl) {\n  /* data set comming from index.html */\n  console.log(tweetsEl.dataset)\n  // It can pass it the params and props in the TweetsComponent\n  ReactDOM.render(e(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\n// gets all the elements with that class and replace in the same way of tweets element\nconst TweetDetailElements = document.querySelectorAll(\".tweetme-detail\")\n\nTweetDetailElements.forEach(container =>{\n  ReactDOM.render(\n    e(TweetDetailComponent, container.dataset), container);\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}